generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String     @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  Seller        Seller[]
  Order         Order[]
  Address       Address[]
  Customer      Customer[]
  roles         UserRole[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Role {
  id        String     @id
  name      String     @unique
  createdAt DateTime
  updatedAt DateTime?
  users     UserRole[]
}

model UserRole {
  userId String
  user   User   @relation(fields: [userId], references: [id])
  roleId String
  role   Role   @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
}

model Customer {
  id           String  @id
  user         User    @relation(fields: [userId], references: [id])
  userId       String  @unique
  isSubscribed Boolean @default(false)
  phoneNumber  String?
}

model Seller {
  id          String    @id
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @unique
  companyName String?
  products    Product[]
}

model Product {
  id          String      @id
  name        String
  description String
  price       Float
  stock       Int         @default(0)
  imageUrl    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  seller      Seller?     @relation(fields: [sellerId], references: [id])
  sellerId    String?
  orderItems  OrderItem[]
  promotionId String?
  promotion   Promotion?  @relation(fields: [promotionId], references: [id])
}

model Promotion {
  id          String    @id
  name        String
  description String?
  discount    Float
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  products    Product[]
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Order {
  id         String      @id
  userId     String
  customer   User        @relation(fields: [userId], references: [id])
  total      Float
  status     OrderStatus @default(PENDING)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  orderItems OrderItem[]
  shipment   Shipment?
}

model OrderItem {
  id              String  @id
  orderId         String
  order           Order   @relation(fields: [orderId], references: [id])
  productId       String
  product         Product @relation(fields: [productId], references: [id])
  quantity        Int
  priceAtPurchase Float
}

model Shipment {
  id               String    @id
  orderId          String    @unique
  order            Order     @relation(fields: [orderId], references: [id])
  trackingNumber   String    @unique
  pickupDateTime   DateTime?
  shippingDateTime DateTime?
  deliveryDateTime DateTime?
  address          Address   @relation(fields: [addressId], references: [id])
  addressId        String
}

model Address {
  id         String     @id
  street     String
  city       String
  state      String
  postalCode String
  country    String
  userId     String
  user       User       @relation(fields: [userId], references: [id])
  isDefault  Boolean    @default(false)
  shipments  Shipment[]
}
